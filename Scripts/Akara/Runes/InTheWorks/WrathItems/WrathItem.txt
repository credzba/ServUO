using System; 
using System.Collections;
using Server;
using Server.Spells;
using Server.Items; 
using Server.Targeting; 
using Server.ContextMenus; 
using Server.Gumps; 
using Server.Network; 
using Server.Mobiles; 

namespace Server.Items 
{ 
   	public abstract class WrathItem: Item 
   	{ 
		private Mobile m_Owner;
		private int m_Power;
		private bool m_Using;

		[CommandProperty( AccessLevel.GameMaster )]
		public Mobile Owner
		{ 
			get{ return m_Owner; } 
			set
			{
				m_Owner = value;
				BlessedFor = value;
			}
		}
		[CommandProperty( AccessLevel.GameMaster )]
		public int Power{ get{ return m_Power; } set{ m_Power = value; } }

		public bool Using{ get{ return m_Using; } set{ m_Using = value; } }

		[Constructable]
		public WrathItem() : base()
		{
			Weight = 0.0;
			new InternalTimer( this );
		}

		public override void GetProperties( ObjectPropertyList list )
		{
			base.GetProperties( list );

			list.Add( 1060658, "Power\t{0}", Power );
		}

		public override bool OnEquip( Mobile from )
		{
			if ( Owner == null )
			{
				from.SendMessage( "You are now the owner of this wrath item." );
				Owner = from;
			}
			if ( Owner != from )
			{
				from.SendMessage( "You do not own this!" );
				return false;
			}
			else
			{
				from.SendMessage( "You feel your body being sapped slowly of it's health." );
				return base.OnEquip( from );
			}

		}

            	public WrathItem( Serial serial ) : base ( serial ) 
            	{             
           	} 

           	public override void Serialize( GenericWriter writer ) 
           	{ 
              		base.Serialize( writer ); 
              		writer.Write( (int) 0 ); 
              		writer.Write( m_Owner ); 
              		writer.Write( (int) m_Power ); 
              		writer.Write( (bool) m_Using ); 
           	} 
            
           	public override void Deserialize( GenericReader reader ) 
           	{ 
              		base.Deserialize( reader ); 
              		int version = reader.ReadInt(); 
              		m_Owner = reader.ReadMobile(); 
              		m_Power = reader.ReadInt(); 
              		m_Using = reader.ReadBool(); 
           	} 
		public override void GetContextMenuEntries( Mobile from, ArrayList list )
		{
			if ( from.Alive && Parent == from )
				list.Add( new InternalUseEntry( from, this, Using ) ); // Use
			if ( from.Alive && IsChildOf( from ) )
				list.Add( new InternalTransferEntry( from, this ) ); // Transfer
		}
		private class InternalUseEntry : ContextMenuEntry
		{
			private Mobile m_From;
			private WrathItem m_WI;

			public InternalUseEntry( Mobile from, WrathItem wi, bool inuse ) : base( inuse ? 6112 : 6113, 14 )//FIX!!!!!!!!
			{
				m_From = from;
				m_WI = wi;
			}

			public override void OnClick()
			{
				if ( !m_WI.Using )
				{
					m_From.SendMessage( "You use your wrath item, a strange feeling flows through your body." );
					m_WI.Using = true;
					m_WI.Movable = false;
				}
				else
				{
					m_From.SendMessage( "You stop using your wrath item." );
					m_WI.Using = false;
					m_WI.Movable = true;
				}
			}
		}
		private class InternalTransferEntry : ContextMenuEntry
		{
			private Mobile m_From;
			private WrathItem m_WI;

			public InternalTransferEntry( Mobile from, WrathItem wi ) : base( 6113, 14 )
			{
				m_From = from;
				m_WI = wi;
			}

			public override void OnClick()
			{
				if ( !m_WI.Using )
				{
					m_From.SendMessage( "Target the person you wish to transfer this wrath item to." );
					m_From.Target = new TransferWITarget( m_From, m_WI );
				}
				else
					m_From.SendMessage( "You are currently using this item." );
			}
		}
		private class InternalTimer : Timer
		{
			private WrathItem m_WI;
			private DateTime m_NextGain;
			private DateTime m_NextHitSap;
			private DateTime m_NextSMSap;

			public InternalTimer( WrathItem wi ) : base( TimeSpan.Zero, TimeSpan.FromSeconds( 0.1 ) )
			{
				m_WI = wi;
			}

			protected override void OnTick()
			{
				if ( m_WI == null || m_WI.Deleted )
					Stop();

				if ( m_WI.Parent == null || !(m_WI.Parent is Mobile) ||m_WI.Using )
					return;

				bool on = false;
				foreach ( Network.NetState state in Network.NetState.Instances )
				{
					if ( state.Mobile == null )
						continue;

					Mobile owner = (Mobile)state.Mobile;

					if ( owner == m_WI.Owner )
						on = true;
				}

				if ( !on )
					return;

				if ( DateTime.Now >= m_NextGain )
				{
					m_WI.Power += 1;

					int amount = 0;
					while( (int)(m_IO.Power/200) >= amount )
						amount++;
					m_NextGain = DateTime.Now + TimeSpan.FromMinutes( (double)(amount) );
				}
				if ( DateTime.Now >= m_NextSap && m_WI.Owner != null && m_WI.Owner.CheckAlive() )
				{
					if ( m_WI.Owner.Hits >= 1 )
						m_WI.Owner.Kill();

					m_WI.Owner.Hits -= 1;

					m_NextHitSap = DateTime.Now + TimeSpan.FromSeconds( 22.0 );
				}
				if ( DateTime.Now >= m_NextSap && m_WI.Owner != null && m_WI.Owner.CheckAlive() )
				{
					m_WI.Owner.Stam -= 1;
					m_WI.Owner.Mana -= 1;

					m_NextSMSap = DateTime.Now + TimeSpan.FromSeconds( 14.0 );
				}
			}
		}
        } 
	public class TransferWIGump : Gump
	{
		private Mobile m_From;
		private Mobile m_Target;
		private WrathItem m_WI;

		public TransferWIGump( Mobile from, Mobile target, WrathItem wi ) : base( 25, 50 )
		{
			m_From = from;
			m_Target = target;
			m_WI = wi;

			AddPage( 0 );

			AddBackground( 0, 0, 420, 150, 5054 );

			AddImageTiled( 10, 10, 400, 130, 2624 );
			AddAlphaRegion( 10, 10, 400, 130 );

			AddLabel( 30, 30, 1152, m_From.Name +" would like to transfer a wrath item to you." );

			AddButton( 100, 90, 4005, 4007, 1, GumpButtonType.Reply, 0 );
			AddLabel( 130, 90, 1152, "Accept" );
			AddButton( 100, 115, 4005, 4007, 0, GumpButtonType.Reply, 0 );
			AddLabel( 130, 115, 1152, "Decline" );
		}

		public override void OnResponse( NetState state, RelayInfo info )
		{
			if ( info.ButtonID == 0 )
			{
				m_From.SendMessage( m_Target.Name +" has declined your trasnfer of the wrath item." );
				m_Target.SendMessage( "You have declined "+ m_From.Name +"'s trasnfer of a wrath item." );
			}
			if ( info.ButtonID == 1 )
			{
				m_From.SendMessage( m_Target.Name +" has accepted your trasnfer of the wrath item." );
				m_Target.SendMessage( "You have accepted "+ m_From.Name +"'s trasnfer of a wrath item." );

				m_Target.AddToBackpack( m_WI );
				m_WI.Owner = m_Target;
			}
		}
	}
	public class TransferWITarget : Target
	{
		private Mobile m_From;
		private WrathItem m_WI;

		public TransferWITarget( Mobile from, WrathItem wi ) : base( 0, false, TargetFlags.None )
		{
			m_WI = wi;
			m_From = from;
		}

		protected override void OnTarget( Mobile from, object o )
		{
			if ( o is PlayerMobile )
			{
				PlayerMobile target = (PlayerMobile)o;

				target.SendGump( new TransferWIGump( m_From, target, m_WI ) );
				target.SendMessage( m_From.Name +" would like to trasfer a wrath item to you." );
			}
			else
				from.SendMessage( "That target is invalid." );
		}
	}
} 